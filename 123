package main

import (
	"flag"
	"fmt"
	"math/rand"
	"sync"
)

func main() {
	var wg sync.WaitGroup
	countOfFlows := flag.Int("flow", 3, "help message for flow")
	maxNumber := flag.Int("nums", 15, "help messsage for nums")
	flag.Parse()
	numberChan := make(chan int, *countOfFlows)
	quit := make(chan struct{})
	min := -*maxNumber
	max := *maxNumber
	for i := 0; i < *countOfFlows; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			for {
				select {
				case <- quit:
					return
				default:
					random := rand.Intn(max-min) + min
					numberChan <- random
				}
			}
		}()
	}
		wg.Add(1)
		func ()  {
			var numbers []int
		defer wg.Done()
		for g := 0; g <= *maxNumber; g++ {
			numbers = []int{<-numberChan}
		}
		for g := 0; g <= *maxNumber; g++ {
		for j:=0; j <= g; j++ {
			if numbers[g]==numbers[j] {
				removeByIndex(numbers, g)
				numbers[g] = <- numberChan
			}
		}
		if len(numbers) > *maxNumber {
			close(quit)
		}
		fmt.Println(numbers)
		}
	}()
wg.Wait()
	}


func removeByIndex(array []int, index int) []int {
   return append(array[:index], array[index+1:]...)
}
